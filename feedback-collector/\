from datetime import datetime
from pathlib import Path
import json


class FeedbackCollector:
    def submit_feedback(self, user: str, rating: int, comments: str = "") -> None:
        """
        Submits feedback with a username, 1-5 start rating, and optional comments.
        """
        timestamp = datetime.now().isoformat()
        feedback_details = {
            "user": user,
            "rating": rating,
            "comments": comments,
            "timestamp": timestamp,
        }
        feedback_item = json.dumps(feedback_details) + "\n"

        if len(user) <= 0:
            raise ValueError("The username is not defined (empty string).")
        elif (rating < 1) or (rating > 5):
            raise ValueError("Rating is invalid (not between 1 and 5).")
        else:
            file_location = Path("./feedback.json")
            if not file_location.is_file():
                print("File does not exist, creating now.")
                with open("feedback.json", "w") as newfile:
                    newfile.write(feedback_item)
            else:
                with open("feedback.json", "a") as file:
                    file.write(feedback_item)

            print("Feedback added to file.")

    def _gather_feedback(self) -> list[dict]:
        feedback_list = []
        with open("feedback.json", "r") as file:
            for line in file:
                feedback_list.append(json.loads(line))

        return feedback_list
        # TODO: Raise IOError if the file is corrupted or cannot be loaded (in use or doesn't exist?).

    def get_feedback_summary(self) -> dict:
        """
        Returns summary data:
        - total submissions
        - average rating
        - count per rating level (1-5)
        """
        feedback_list = self._gather_feedback()
        total_submissions = len(feedback_list)
        rating_sum = 0
        average_rating = 0
        five_star = 0
        four_star = 0
        three_star = 0
        two_star = 0
        one_star = 0

        for item in range(total_submissions):
            rating_number = feedback_list[item]["rating"]
            rating_sum += rating_number
            if rating_number == 5:
                five_star += 1
            elif rating_number == 4:
                four_star += 1
            elif rating_number == 3:
                three_star += 1
            elif rating_number == 2:
                two_star += 1
            elif rating_number == 1:
                one_star += 1

        print("total amount of reviews: " + str(total_submissions))
        print(rating_sum)

        average_rating = rating_sum / total_submissions
        print(average_rating)

        # TODO: Calculate the amount if ratings for each rating level (1-5) as a dict.
        # Get amount of ratings for 5 star submission.
        print(
            "Ratings breakdown: "
            + str(five_star)
            + str(four_star)
            + str(three_star)
            + str(two_star)
            + str(one_star)
        )
        # Get the amount of ratiings for the rest of the levels.

    def list_feedback(self, min_rating: int = 1) -> list[dict]:
        """
        Returns all feedback entries with rating >= min_rating.
        """
        # TODO: Gather ratings data from the helper function.
        # TODO: Raise ValueError if:
        # min_rating is invalid


##### TESTING SECTION #####

fc = FeedbackCollector()

# fc.submit_feedback("alicej", 5, "Loved the service!")
# fc.submit_feedback("bobk", 3)
# fc.submit_feedback("cooperf", 2, "Not the greatest experience.")
# fc.submit_feedback("davidg", 4)
# fc.submit_feedback("bridgetq", 4, "Pretty good service.")
# fc.submit_feedback("brucew", 1, "Awful service.")
# fc.submit_feedback("perryp", 5, "Wow, amazing service!")
# fc.submit_feedback("heinzd", 4, "Good service, but could be better.")
# fc.submit_feedback("fionag", 3, "Alright, not enough snacks...")
# fc.submit_feedback("frankr", 1, "It's trash!")
# fc.submit_feedback("juant", 2, "")
# fc.submit_feedback("estherm", 4, "")
# fc.submit_feedback("marias", 1, "Not good...")
# fc.submit_feedback("winniec", 5, "This is my new spot!")
# fc.submit_feedback("zackb", 3, "Service needs improvement, the rest is fine.")
# fc.submit_feedback("yolandae", 5, "")
fc.submit_feedback("malcomy", 4, "Nice place.")
fc.submit_feedback("ronw", 1, "")

fc.get_feedback_summary()
# Returns:
# {
#   "total": 2,
#   "average_rating": 4.0
#   "ratings_breakdown": {"5": 1, "4": 0, "3": 1, "2": 0, "1": 0 }
# }

# fc.list_feedback(4)                   # Returns only entries with rating 4 or 5.

### ERROR TESTING ###

# fc.submit_feedback("", 5)             # Expected: ValueError 1 - username is an empty string
# fc.submit_feedback("perryp", 0)       # Expected: ValueError 2 - rating number is below 1
# fc.submit_feedback("heinzd", 20)      # Expected: ValueError 2 - rating number is above 5
# fc.submit_feedback("", 69)            # Expected: ValueError 1 and 2 (if either one is fixed) - username is an empty string, rating number is above 5
